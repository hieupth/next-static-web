import { ReactNode } from 'react';
import type { Metadata } from "next";
import { redirect } from "next/navigation";
import { NextIntlClientProvider } from 'next-intl';
import { Geist, Geist_Mono } from "next/font/google";
import { setRequestLocale, getMessages } from 'next-intl/server';
import { routing, getLocaleFromParams } from '@/shared/lib/i18n/routing';
import "../globals.css";


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

/**
 * Generates the static parameters for Next.js dynamic routes.
 */
export function generateStaticParams() {
  return [
    // Root path (no locale)
    { locale: [] },
    // Specific locales
    ...routing.locales.map((locale) => ({ locale: [locale] }))
  ];
}

/**
 * Locale-aware layout properties.
 */
interface LocaleLayoutProps {
  // The child React components to render inside the layout
  children?: ReactNode,
  // Promise resolving to an object containing optional locale array from route parameters
  params: Promise<{locale?: string[]}>
}

/**
 * Locale-aware layout component for Next.js.
 */
export default async function LocaleLayout({ children, params }: LocaleLayoutProps) {
  // Extract locale information from the route parameters
  const { localeArray, currentLocale, isValidLocale } = await getLocaleFromParams(params);

  // Redirect to default locale if the current locale is invalid
  if (!isValidLocale) {
    redirect(`/${routing.defaultLocale}`);
  }

  // Set request locale before get messages.
  setRequestLocale(currentLocale);

  // Get i18n messages.
  const messages = await getMessages();

  // Render the layout with NextIntl provider and locale-aware HTML attribute
  return (
    <html lang={currentLocale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider locale={currentLocale} messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}